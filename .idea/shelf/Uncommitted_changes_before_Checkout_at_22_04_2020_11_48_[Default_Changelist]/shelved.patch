Index: src/test/java/models/GraphTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass GraphTest {\r\n    Graph graph;\r\n    Graph graph2;\r\n    Graph graph3;\r\n    Graph graph4;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        this.graph = new Graph(5);\r\n        this.graph2 = new Graph(3);\r\n        this.graph3 = new Graph(3);\r\n        this.graph4 = new Graph(3);\r\n    }\r\n\r\n    @Test\r\n    void updateVertices() {\r\n        this.graph.setVerticesNumber(2);\r\n\r\n        assertEquals(this.graph.vertices.size(), 0, \"should't have any vertices at the start\");\r\n\r\n        this.graph.addEdgeFromString(\"1;2;4\");\r\n        assertEquals(new Vertice(1), this.graph.vertices.get(0), \"should contain a vertice v1\");\r\n        assertEquals(new Vertice(2), this.graph.vertices.get(1), \"should contain a vertice v2\");\r\n    }\r\n\r\n    @Test\r\n    void addEdgeFromString() {\r\n        this.graph.setVerticesNumber(3);\r\n        assertEquals(0, this.graph.edges.size(), \"Should have no edge\");\r\n\r\n        this.graph.addEdgeFromString(\"1;2;4\");\r\n        assertEquals(new Edge(4, 1, 2), this.graph.edges.get(0), \"Should have one edge connected to v1 and v2\");\r\n\r\n        this.graph.addEdgeFromString(\"1;3;2\");\r\n        assertEquals(new Edge(2, 1, 3), this.graph.edges.get(1), \"Should have a new edge connected to v1 and v3\");\r\n    }\r\n\r\n    @Test\r\n    void isAdjacent() {\r\n        this.graph.setVerticesNumber(3);\r\n\r\n        this.graph.addEdgeFromString(\"1;2;4\");\r\n        this.graph.addEdgeFromString(\"1;3;4\");\r\n\r\n        assertTrue(this.graph.isAdjacent(new Vertice(1), new Vertice(2)), \"should return that vertices<1,2> are adjacent\");\r\n        assertTrue(this.graph.isAdjacent(new Vertice(2), new Vertice(1)), \"should return that vertices<2,1> are adjacent\");\r\n        assertTrue(this.graph.isAdjacent(new Vertice(1), new Vertice(3)), \"should return that vertices<1,3> are adjacent\");\r\n        assertFalse(this.graph.isAdjacent(new Vertice(3), new Vertice(2)), \"should return that vertices are not adjacent\");\r\n    }\r\n\r\n    @Test\r\n    void getDegree() {\r\n        this.graph.setVerticesNumber(4);\r\n\r\n        this.graph.addEdgeFromString(\"1;2;0\");\r\n        this.graph.addEdgeFromString(\"1;3;0\");\r\n        this.graph.addEdgeFromString(\"1;3;0\");\r\n        this.graph.addIsolatedVertice(new Vertice(5));\r\n\r\n        assertEquals(this.graph.getDegree(new Vertice(1)), 3, \"should return degree 3\");\r\n        assertEquals(this.graph.getDegree(new Vertice(2)), 1, \"should return degree 1\");\r\n        assertEquals(this.graph.getDegree(new Vertice(5)), 0, \"should return degree 0\");\r\n        assertEquals(this.graph.getDegree(new Vertice(4)), -1, \"should return vertice is not part of graph\");\r\n    }\r\n\r\n    @Test\r\n    void isIsolated() {\r\n        this.graph.setVerticesNumber(2);\r\n\r\n        this.graph.addEdgeFromString(\"1;2;0\");\r\n        this.graph.addIsolatedVertice(new Vertice(3));\r\n\r\n        assertFalse(this.graph.isIsolated(new Vertice(1)), \"should return vertice1 is not isolated\");\r\n        assertFalse(this.graph.isIsolated(new Vertice(5)), \"should return vertice2 is not isolated\");\r\n        assertTrue(this.graph.isIsolated(new Vertice(3)), \"should return that vertice is isolated\");\r\n    }\r\n\r\n    @Test\r\n    void addIsolatedVertice(){\r\n        this.graph.setVerticesNumber(1);\r\n\r\n        this.graph.addIsolatedVertice(new Vertice(1));\r\n\r\n        assertTrue(this.graph.vertices.contains(new Vertice(1)), \"should return that it contains the vertice\");\r\n        assertTrue(this.graph.isIsolated(new Vertice(1)), \"should return that the vertice is isolated\");\r\n\r\n    }\r\n\r\n    @Test\r\n    void isPending() {\r\n        this.graph.setVerticesNumber(4);\r\n\r\n        this.graph.addEdgeFromString(\"1;2;4\");\r\n        this.graph.addEdgeFromString(\"1;3;7\");\r\n        this.graph.addEdgeFromString(\"2;3;10\");\r\n        this.graph.addEdgeFromString(\"4;2;3\");\r\n\r\n        assertFalse(this.graph.isPending(new Vertice(1)), \"should return that vertice is not pending\");\r\n        assertTrue(this.graph.isPending(new Vertice(4)), \"should return that vertice is pending\");\r\n    }\r\n\r\n    @Test\r\n    void isRegular() {\r\n        this.graph.setVerticesNumber(3);\r\n        this.graph2.setVerticesNumber(4);\r\n\r\n        this.graph.addEdgeFromString(\"1;2;4\");\r\n        this.graph.addEdgeFromString(\"1;3;7\");\r\n        this.graph.addEdgeFromString(\"2;3;10\");\r\n\r\n        this.graph2.addEdgeFromString(\"1;2;4\");\r\n        this.graph2.addEdgeFromString(\"1;3;7\");\r\n        this.graph2.addEdgeFromString(\"2;3;10\");\r\n        this.graph2.addEdgeFromString(\"4;2;3\");\r\n\r\n        assertTrue(this.graph.isRegular(), \"should return that graph is regular\");\r\n        assertFalse(this.graph2.isRegular(), \"should return that graph is not regular\");\r\n    }\r\n\r\n    @Test\r\n    void isNull() {\r\n        this.graph.setVerticesNumber(0);\r\n        this.graph2.setVerticesNumber(2);\r\n\r\n        this.graph2.addEdgeFromString(\"1;2;4\");\r\n\r\n        assertTrue(this.graph.isNull(), \"should return that graph is null\");\r\n        assertFalse(this.graph2.isNull(), \"should return that graph is not null\");\r\n    }\r\n\r\n    @Test\r\n    void hasLoops() {\r\n        this.graph.setVerticesNumber(2);\r\n        this.graph2.setVerticesNumber(3);\r\n\r\n        this.graph.addEdgeFromString(\"1;2;4\");\r\n        this.graph.addEdgeFromString(\"1;1;6\");\r\n\r\n        this.graph2.addEdgeFromString(\"1;2;4\");\r\n        this.graph2.addEdgeFromString(\"1;3;6\");\r\n\r\n        assertTrue(this.graph.hasLoops(), \"should return that graph has loop(s)\");\r\n        assertFalse(this.graph2.hasLoops(), \"should return that graph does not have any loops\");\r\n    }\r\n\r\n    @Test\r\n    void hasParallelEdges() {\r\n        this.graph.setVerticesNumber(3);\r\n        this.graph2.setVerticesNumber(3);\r\n\r\n        this.graph.addEdgeFromString(\"1;2;4\");\r\n        this.graph.addEdgeFromString(\"1;2;6\");\r\n        this.graph.addEdgeFromString(\"2;3;6\");\r\n\r\n        this.graph2.addEdgeFromString(\"1;2;4\");\r\n        this.graph2.addEdgeFromString(\"1;3;6\");\r\n        this.graph.addEdgeFromString(\"2;3;1\");\r\n\r\n        assertTrue(this.graph.hasParallelEdges(), \"should return that graph has parallel edge(s)\");\r\n        assertFalse(this.graph2.hasParallelEdges(), \"should return that graph does not have any parallel edge(s)\");\r\n    }\r\n\r\n    @Test\r\n    void isSimple() {\r\n        this.graph.setVerticesNumber(2);\r\n        this.graph2.setVerticesNumber(3);\r\n        this.graph3.setVerticesNumber(3);\r\n        this.graph4.setVerticesNumber(3);\r\n\r\n        this.graph.addEdgeFromString(\"1;2;4\");\r\n        this.graph.addEdgeFromString(\"1;1;6\");\r\n\r\n        this.graph2.addEdgeFromString(\"1;2;4\");\r\n        this.graph2.addEdgeFromString(\"1;2;6\");\r\n        this.graph2.addEdgeFromString(\"2;3;6\");\r\n\r\n        this.graph3.addEdgeFromString(\"1;2;4\");\r\n        this.graph3.addEdgeFromString(\"1;1;6\");\r\n        this.graph3.addEdgeFromString(\"1;2;4\");\r\n        this.graph3.addEdgeFromString(\"1;2;6\");\r\n        this.graph3.addEdgeFromString(\"2;3;6\");\r\n\r\n        this.graph4.addEdgeFromString(\"1;2;4\");\r\n        this.graph4.addEdgeFromString(\"2;3;6\");\r\n        this.graph4.addEdgeFromString(\"3;1;2\");\r\n\r\n        assertFalse(this.graph.isSimple(), \"should return that graph is not simple because it has loop(s)\");\r\n        assertFalse(this.graph2.isSimple(), \"should return that graph is not simple because it has parallel edge(s)\");\r\n        assertFalse(this.graph3.isSimple(), \"should return that graph is not simple because it has loop(s) and parallel edge(s)\");\r\n        assertTrue(this.graph4.isSimple(), \"should return that graph is simple\");\r\n    }\r\n\r\n    @Test\r\n    void isComplete() {\r\n        this.graph.setVerticesNumber(3);\r\n        this.graph2.setVerticesNumber(4);\r\n        this.graph3.setVerticesNumber(2);\r\n        this.graph4.setVerticesNumber(3);\r\n\r\n        this.graph.addEdgeFromString(\"1;2;4\");\r\n        this.graph.addEdgeFromString(\"2;3;6\");\r\n        this.graph.addEdgeFromString(\"3;1;2\");\r\n\r\n        this.graph2.addEdgeFromString(\"1;2;2\");\r\n        this.graph2.addEdgeFromString(\"2;3;2\");\r\n        this.graph2.addEdgeFromString(\"3;4;2\");\r\n        this.graph2.addEdgeFromString(\"4;1;2\");\r\n        this.graph2.addEdgeFromString(\"1;3;2\");\r\n        this.graph2.addEdgeFromString(\"2;4;2\");\r\n\r\n        this.graph3.addEdgeFromString(\"1;2;4\");\r\n        this.graph3.addEdgeFromString(\"1;1;6\");\r\n\r\n        this.graph4.addEdgeFromString(\"1;2;4\");\r\n        this.graph4.addEdgeFromString(\"1;2;6\");\r\n        this.graph4.addEdgeFromString(\"2;3;6\");\r\n\r\n        assertTrue(this.graph.isComplete(), \"should return that graph is complete\");\r\n        assertTrue(this.graph2.isComplete(), \"should return that graph is complete\");\r\n        assertFalse(this.graph3.isComplete(), \"should return that graph is not complete\");\r\n        assertFalse(this.graph4.isComplete(), \"should return that graph is not complete\");\r\n    }\r\n\r\n    // it will not work unless vertices count start on 1 (v1, v2, v3...) instead of (v0, v1, v2...)\r\n    @Test\r\n    void isConnected() {\r\n        this.graph.setVerticesNumber(6);\r\n        this.graph2.setVerticesNumber(8);\r\n\r\n        this.graph.addEdgeFromString(\"1;2;4\");\r\n        this.graph.addEdgeFromString(\"1;3;6\");\r\n        this.graph.addEdgeFromString(\"2;3;2\");\r\n        this.graph.addEdgeFromString(\"3;4;4\");\r\n        this.graph.addEdgeFromString(\"4;5;6\");\r\n        this.graph.addEdgeFromString(\"4;5;2\");\r\n        this.graph.addEdgeFromString(\"5;6;2\");\r\n\r\n        this.graph2.addEdgeFromString(\"1;2;4\");\r\n        this.graph2.addEdgeFromString(\"2;3;6\");\r\n        this.graph2.addEdgeFromString(\"4;4;2\");\r\n        this.graph2.addEdgeFromString(\"5;6;4\");\r\n        this.graph2.addEdgeFromString(\"6;8;6\");\r\n        this.graph2.addEdgeFromString(\"8;7;2\");\r\n        this.graph2.addEdgeFromString(\"7;5;2\");\r\n\r\n        assertTrue(this.graph.isConnected(), \"should return that graph is connected\");\r\n        assertFalse(this.graph2.isConnected(), \"should return that graph is not connected\");\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/models/GraphTest.java	(revision 9da7d8e99755c38a8de86bf340952738176c3762)
+++ src/test/java/models/GraphTest.java	(date 1587566901722)
@@ -90,7 +90,6 @@
 
         assertTrue(this.graph.vertices.contains(new Vertice(1)), "should return that it contains the vertice");
         assertTrue(this.graph.isIsolated(new Vertice(1)), "should return that the vertice is isolated");
-
     }
 
     @Test
Index: src/main/java/models/DirectedGraph.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class DirectedGraph {\r\n    final int verticesNumber;\r\n    final List<Vertice> vertices = new ArrayList<>();\r\n    final List<DirectedEdge> edges = new ArrayList<>();\r\n\r\n    public DirectedGraph(int verticesNumber) {\r\n        this.verticesNumber = verticesNumber;\r\n    }\r\n\r\n    /**\r\n     * Add edge to graph from string and update vertices\r\n     *\r\n     * @param edgeString edge string\r\n     */\r\n    public void addEdgeFromString(String edgeString) {\r\n        this.edges.add(new DirectedEdge(edgeString));\r\n        this.updateVertices();\r\n    }\r\n\r\n    /**\r\n     * Update vertices list\r\n     */\r\n    public void updateVertices() {\r\n        this.edges.forEach(e -> e.vertices.forEach(v -> {\r\n            if (!this.vertices.contains(v)) this.vertices.add(v);\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Get vertice's entry degree\r\n     *\r\n     * @param v1 vertice to be analyzed\r\n     * @return the entry degree -1 if vertice is not part of the graph\r\n     */\r\n    int getEntryDegree(Vertice v1) {\r\n        return this.vertices.contains(v1)\r\n                ? (int) this.edges.stream().filter(e -> e.vertices.get(1).equals(v1)).count()\r\n                : -1;\r\n    }\r\n\r\n    /**\r\n     * Get vertice's exit degree\r\n     *\r\n     * @param v1 vertice to be analyzed\r\n     * @return the exit degree -1 if vertice is not part of the graph\r\n     */\r\n    int getExitDegree(Vertice v1) {\r\n        return this.vertices.contains(v1)\r\n                ? (int) this.edges.stream().filter(e -> e.vertices.get(0).equals(v1)).count()\r\n                : -1;\r\n    }\r\n\r\n    /**\r\n     * If the graph is cyclic or not using depth traversal algorithm\r\n     *\r\n     * @return if it has a cycle\r\n     */\r\n    boolean hasCycle() {\r\n        //Visited and Stack arrays\r\n        boolean[] visited = new boolean[verticesNumber];\r\n        boolean[] recStack = new boolean[verticesNumber];\r\n\r\n        //Call Recursive helper function\r\n        for (int i = 0; i < this.vertices.size(); i++)\r\n            if (hasCycleUtil(i, visited, recStack))\r\n                return true;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Recursive helper function for hasCycle method\r\n     *\r\n     * @param v       vertice being analyzed\r\n     * @param visited if it was visited or not\r\n     * @return if the vertice has a cycle or not\r\n     */\r\n    private boolean hasCycleUtil(int v, boolean[] visited, boolean[] recStack) {\r\n\r\n        if (recStack[v])\r\n            return true;\r\n\r\n        if (visited[v])\r\n            return false;\r\n\r\n        //Add current node to stack and set it as visited\r\n        visited[v] = true;\r\n        recStack[v] = true;\r\n\r\n        List<Vertice> adjList = this.edges\r\n                .stream()\r\n                .filter(e -> e.vertices.get(0)\r\n                        .equals(this.vertices.get(v))\r\n                )\r\n                .map(e -> e.vertices.get(1))\r\n                .collect(Collectors.toList());\r\n\r\n        for (Vertice vertice : adjList)\r\n            if (hasCycleUtil(this.vertices.indexOf(vertice), visited, recStack))\r\n                return true;\r\n\r\n        recStack[v] = false;\r\n\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        DirectedGraph that = (DirectedGraph) o;\r\n        return verticesNumber == that.verticesNumber &&\r\n                vertices.equals(that.vertices) &&\r\n                edges.equals(that.edges);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(verticesNumber, vertices, edges);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/models/DirectedGraph.java	(revision 9da7d8e99755c38a8de86bf340952738176c3762)
+++ src/main/java/models/DirectedGraph.java	(date 1587566661928)
@@ -1,7 +1,6 @@
 package models;
 
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 import java.util.stream.Collectors;
Index: grafos-trabalho-1.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_14\">\r\n    <output url=\"file://$MODULE_DIR$/target/classes\" />\r\n    <output-test url=\"file://$MODULE_DIR$/target/test-classes\" />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/resources\" type=\"java-resource\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"true\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"openjdk-14\" jdkType=\"JavaSDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.jupiter:junit-jupiter:5.4.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.jupiter:junit-jupiter-api:5.4.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.apiguardian:apiguardian-api:1.0.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.opentest4j:opentest4j:1.1.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.platform:junit-platform-commons:1.4.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.jupiter:junit-jupiter-params:5.4.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.jupiter:junit-jupiter-engine:5.4.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.platform:junit-platform-engine:1.4.0\" level=\"project\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- grafos-trabalho-1.iml	(revision 9da7d8e99755c38a8de86bf340952738176c3762)
+++ grafos-trabalho-1.iml	(date 1587566518237)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
+  <component name="ExternalSystem" externalSystem="Maven" />
   <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_14">
     <output url="file://$MODULE_DIR$/target/classes" />
     <output-test url="file://$MODULE_DIR$/target/test-classes" />
@@ -9,7 +10,7 @@
       <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
       <excludeFolder url="file://$MODULE_DIR$/target" />
     </content>
-    <orderEntry type="jdk" jdkName="openjdk-14" jdkType="JavaSDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter:5.4.0" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-api:5.4.0" level="project" />
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_14\" default=\"false\" project-jdk-name=\"openjdk-14\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/classes\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 9da7d8e99755c38a8de86bf340952738176c3762)
+++ .idea/misc.xml	(date 1587566484158)
@@ -7,7 +7,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_14" default="false" project-jdk-name="openjdk-14" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_14" default="false" project-jdk-name="14" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/classes" />
   </component>
 </project>
\ No newline at end of file
